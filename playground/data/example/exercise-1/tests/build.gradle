plugins {
}

apply plugin: 'java'
sourceCompatibility = 17
version = '1.0.0'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testImplementation 'de.tum.in.ase:artemis-java-test-sandbox:1.11.3'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // testImplementation(':MT-Test-PE-1')
    // testImplementation(':MT-Test-PE-1-Solution')
}

def assignmentSrcDir = "assignment/src"
def studentOutputDir = sourceSets.main.java.destinationDirectory.get()

sourceSets {
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }


    main {
        java {
            srcDirs = [assignmentSrcDir]
        }
        resources {
            srcDirs = []
        }
    }
}

def forbiddenPackageFolders = [ //(2)
                                "$studentOutputDir/ch/qos/logback/",
                                "$studentOutputDir/com/intellij/",
                                "$studentOutputDir/com/sun/",
                                "$studentOutputDir/de/tum/in/test/api/",
                                "$studentOutputDir/java/",
                                "$studentOutputDir/javax/",
                                "$studentOutputDir/jdk/",
                                "$studentOutputDir/net/jqwik/",
                                "$studentOutputDir/org/assertj/",
                                "$studentOutputDir/org/apache/",
                                "$studentOutputDir/org/eclipse/",
                                "$studentOutputDir/org/gradle/",
                                "$studentOutputDir/org/jacoco/",
                                "$studentOutputDir/org/json/",
                                "$studentOutputDir/org/junit/",
                                "$studentOutputDir/org/opentest4j/",
                                "$studentOutputDir/sun/",
                                "$studentOutputDir/worker/org/gradle/"
]
test {
    doFirst { //(1)
        for (String packageFolder in forbiddenPackageFolders) {
            assert !file(packageFolder).exists(): "$packageFolder must not exist within the submission."
        }
    }
    defaultCharacterEncoding = 'UTF-8'
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}




